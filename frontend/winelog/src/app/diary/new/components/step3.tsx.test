'use client';

import { useRef, useState, useEffect } from 'react';
import Image from 'next/image';
import { DiaryFormData } from '@/lib/types/diary';
import { WineData } from '@/lib/types/wine';
import { takeWinePhoto, pickWinePhoto, isNativeApp, triggerHaptic } from '@/utils/mobile';
import { ImpactStyle } from '@capacitor/haptics';

interface Step3Props {
  diaryData: DiaryFormData;
  onUpdateDiary: (data: Partial<DiaryFormData>) => void;
  onUpdateWine: (wineData: Partial<WineData>) => void;
}

export default function Step3({ diaryData, onUpdateDiary, onUpdateWine }: Step3Props) {
  const videoRef = useRef<HTMLVideoElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const [isCameraReady, setIsCameraReady] = useState(false);
  const [isNative, setIsNative] = useState(false);

  useEffect(() => {
    // 네이티브 앱인지 확인
    setIsNative(isNativeApp());
    
    // 웹에서만 카메라 스트림 시작
    if (!isNativeApp()) {
      startCamera();
    }

    return () => {
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
      }
    };
  }, []);

  const startCamera = async () => {
    if (isNativeApp()) return; // 네이티브 앱에서는 실행하지 않음

    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { facingMode: 'environment' },
        audio: false
      });

      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        streamRef.current = stream;
        setIsCameraReady(true);
      }
    } catch (err) {
      console.error('카메라를 시작할 수 없습니다:', err);
    }
  };

  // 웹용 캡처 함수
  const handleWebCapture = () => {
    if (!videoRef.current || !isCameraReady) return;

    const canvas = document.createElement('canvas');
    canvas.width = videoRef.current.videoWidth;
    canvas.height = videoRef.current.videoHeight;
    const ctx = canvas.getContext('2d');

    if (ctx && videoRef.current) {
      ctx.drawImage(videoRef.current, 0, 0);
      const imageDataUrl = canvas.toDataURL('image/jpeg');
      onUpdateDiary({ thumbnailImage: imageDataUrl });

      // Stop the camera after capturing
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
        setIsCameraReady(false);
      }
    }
  };

  // 모바일용 촬영 함수
  const handleMobileCapture = async () => {
    await triggerHaptic(ImpactStyle.Medium);
    const photoUrl = await takeWinePhoto();
    if (photoUrl) {
      onUpdateDiary({ thumbnailImage: photoUrl });
    }
  };

  // 갤러리에서 선택
  const handlePickFromGallery = async () => {
    if (isNative) {
      await triggerHaptic(ImpactStyle.Light);
      const photoUrl = await pickWinePhoto();
      if (photoUrl) {
        onUpdateDiary({ thumbnailImage: photoUrl });
      }
    } else {
      // 웹에서는 파일 input 사용
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = 'image/*';
      input.onchange = (e) => {
        const file = (e.target as HTMLInputElement).files?.[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = () => {
            if (reader.result) {
              onUpdateDiary({ thumbnailImage: reader.result as string });
            }
          };
          reader.readAsDataURL(file);
        }
      };
      input.click();
    }
  };

  const handleRetake = async () => {
    if (isNative) {
      await triggerHaptic(ImpactStyle.Light);
    }
    onUpdateDiary({ thumbnailImage: null });
    
    // 웹에서만 카메라 재시작
    if (!isNative) {
      startCamera();
    }
  };

  // 카메라 전/후면 전환 (모바일에서만)
  const handleCameraFlip = async () => {
    if (isNative) {
      await triggerHaptic(ImpactStyle.Light);
      // 모바일에서 전/후면 카메라 전환은 촬영 시 설정으로 처리
      handleMobileCapture();
    }
  };

  return (
    <main className="flex flex-col px-6 pt-0 pb-6">
      {/* Camera Container */}
      <div className="mb-6">
        <h2 className="text-lg font-semibold text-gray-800 mb-4 font-rhodium-libre">Photo</h2>

        <div className="flex justify-center">
          <div className="w-full max-w-sm aspect-[3/4] relative bg-gray-100 rounded-lg overflow-hidden">
            {diaryData.thumbnailImage ? (
              <Image
                src={diaryData.thumbnailImage}
                alt="Captured wine"
                fill
                className="object-cover"
              />
            ) : isNative ? (
              // 네이티브 앱에서는 카메라 플레이스홀더
              <div className="w-full h-full flex items-center justify-center bg-gray-200">
                <div className="text-center">
                  <div className="text-6xl mb-4">📷</div>
                  <p className="text-gray-600">아래 버튼을 눌러<br/>와인 사진을 촬영하세요</p>
                </div>
              </div>
            ) : (
              // 웹에서는 비디오 스트림
              <video
                ref={videoRef}
                autoPlay
                playsInline
                className="w-full h-full object-cover"
              />
            )}
          </div>
        </div>
      </div>

      {/* Camera Controls */}
      <div className="flex justify-center">
        <div className="flex justify-between items-center w-full max-w-sm">
          {/* 갤러리/파일 선택 버튼 */}
          <button
            className="w-12 h-12 flex items-center justify-center rounded-full bg-gray-200 hover:bg-gray-300 transition-colors"
            onClick={handlePickFromGallery}
          >
            <div className="text-2xl">🖼️</div>
          </button>

          {/* 메인 촬영/재촬영 버튼 */}
          {diaryData.thumbnailImage ? (
            <button
              onClick={handleRetake}
              className="w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center hover:bg-blue-600 transition-colors"
            >
              <div className="w-14 h-14 border-2 border-white rounded-full flex items-center justify-center text-white text-sm">
                재촬영
              </div>
            </button>
          ) : (
            <button
              onClick={isNative ? handleMobileCapture : handleWebCapture}
              className="w-16 h-16 bg-red-500 rounded-full flex items-center justify-center hover:bg-red-600 transition-colors"
              disabled={!isNative && !isCameraReady}
            >
              <div className="w-14 h-14 border-2 border-white rounded-full"></div>
            </button>
          )}

          {/* 카메라 전환/설정 버튼 */}
          <button
            className="w-12 h-12 flex items-center justify-center rounded-full bg-gray-200 hover:bg-gray-300 transition-colors"
            onClick={isNative ? handleCameraFlip : () => {}}
          >
            <div className="text-2xl">🔄</div>
          </button>
        </div>
      </div>

      {/* 플랫폼 정보 (개발용) */}
      {process.env.NODE_ENV === 'development' && (
        <div className="mt-4 text-center text-sm text-gray-500">
          플랫폼: {isNative ? '모바일 앱' : '웹 브라우저'}
        </div>
      )}
    </main>
  );
}